# Return a list containing all 4 functions defined above
list(set = set, get = get, setinv = setinv, getinv = getinv)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
# get inverse from the special matrix list using getinv function
inv <-x$getinv()
# check if the inverse has alreay been calculated. If yes, then return
# the value of inverse from cache
if(!is.null(inv)) {
message("getting cached data")
return(inv)
}
# The inverse hasn't been calculated yet. So get the value of matrix
# using get function
data <- x$get()
# calculate the inverse using solve
inv <- solve(data, ...)
# set the inverse using setinv function
x$setinv(inv)
# return the value of inverse calculated above
inv
}
makeCacheMatrix()
## Put comments here that give an overall description of what your
## functions do
# makeCacheMatrix creates a special "matrix", which is really a list
# containing a function to
# 1. set the value of the matrix
# 2. get the value of the matrix
# 3. set the value of the inverse
# 4. get the value of the inverse
makeCacheMatrix <- function(x = matrix()) {
inver <- NULL
set <- function(y) {
x <<- y
inver <<- NULL
}
get <- function() x
setinver <- function(solve) inver <<- solve
getinver <- function() inver
list(set = set, get = get, setinver = setinver, getinver = getinver)
}
## The following function calculates the mean of the special "vector" created
## with the above function. However, it first checks to see if the mean has
## already been calculated. If so, it gets the mean from the cache and skips
## the computation. Otherwise, it calculates the mean of the data and sets the
## value of the mean in the cache via the setmean function
cacheSolve <- function(x, ...) {
inver <-x$getinver()
if(!is.null(inver)) {
message("getting cached data")
return(inver)
}
data <- x$get()
inver <- solve(data, ...)
x$setinv(inver)
inver
}
x <- 1:4
makeCacheMatrix(x)
z<- makeCacheMatrix(x)
z1 <- cacheSolve(x)
z
## Put comments here that give an overall description of what your
## functions do
# makeCacheMatrix creates a special "matrix", which is really a list
# containing a function to
# 1. set the value of the matrix
# 2. get the value of the matrix
# 3. set the value of the inverse
# 4. get the value of the inverse
makeCacheMatrix <- function(x = matrix()) {
inver <- NULL
set <- function(y) {
x <<- y
inver <<- NULL
}
get <- function() x
setinver <- function(solve) inver <<- solve
getinver <- function() inver
list(set = set, get = get, setinver = setinver, getinver = getinver)
}
## The following function calculates the mean of the special "vector" created
## with the above function. However, it first checks to see if the mean has
## already been calculated. If so, it gets the mean from the cache and skips
## the computation. Otherwise, it calculates the mean of the data and sets the
## value of the mean in the cache via the setmean function
cacheSolve <- function(x, ...) {
inver <-x$getinv()
if(!is.null(inv)) {
message("getting cached data")
return(inv)
}
data <- x$get()
inv <- solve(data, ...)
x$setinv(inv)
inv
}
x <- 1:4
z<- makeCacheMatrix(x)
z1 <- cacheSolve(x)
z1 <- cacheSolve(z1)
z1 <- cacheSolve(z)
z1 <- cacheSolve(x)
cacheSolve(x)
## Put comments here that give an overall description of what your
## functions do
# makeCacheMatrix creates a special "matrix", which is really a list
# containing a function to
# 1. set the value of the matrix
# 2. get the value of the matrix
# 3. set the value of the inverse
# 4. get the value of the inverse
makeCacheMatrix <- function(x = matrix()) {
inver <- NULL
set <- function(y) {
x <<- y
inver <<- NULL
}
get <- function() x
setinver <- function(solve) inver <<- solve
getinver <- function() inver
list(set = set, get = get, setinver = setinver, getinver = getinver)
}
## The following function calculates the mean of the special "vector" created
## with the above function. However, it first checks to see if the mean has
## already been calculated. If so, it gets the mean from the cache and skips
## the computation. Otherwise, it calculates the mean of the data and sets the
## value of the mean in the cache via the setmean function
cacheSolve <- function(x, ...) {
i <- x$inverse
if (is.null(i)) {
data <- x$getData()
i <- solve(data)
x$setInverse(i)
}
i
}
x <- 1:4
z<- makeCacheMatrix(x)
z1 <- cacheSolve(z)
z1 <- cacheSolve(x)
## Put comments here that give an overall description of what your
## functions do
# makeCacheMatrix creates a special "matrix", which is really a list
# containing a function to
# 1. set the value of the matrix
# 2. get the value of the matrix
# 3. set the value of the inverse
# 4. get the value of the inverse
makeCacheMatrix <- function(x = matrix()) {
inver <- NULL
set <- function(y) {
x <<- y
inver <<- NULL
}
get <- function() x
setinver <- function(solve) inver <<- solve
getinver <- function() inver
list(set = set, get = get, setinver = setinver, getinver = getinver)
}
## The following function calculates the mean of the special "vector" created
## with the above function. However, it first checks to see if the mean has
## already been calculated. If so, it gets the mean from the cache and skips
## the computation. Otherwise, it calculates the mean of the data and sets the
## value of the mean in the cache via the setmean function
cacheSolve <- function(x, ...) {
i <- x$inver
if (is.null(i)) {
data <- x$getData()
i <- solve(data)
x$setinver(i)
}
i
}
x <- 1:4
z<- makeCacheMatrix(x)
z
z1 <- cacheSolve(x)
## Put comments here that give an overall description of what your
## functions do
# makeCacheMatrix creates a special "matrix", which is really a list
# containing a function to
# 1. set the value of the matrix
# 2. get the value of the matrix
# 3. set the value of the inverse
# 4. get the value of the inverse
makeCacheMatrix <- function(x = matrix()) {
i <- NULL
setData <- function(y) {
x <<- y
i <<- NULL
}
getData <- function() x
setInverse <- function(inv) i <<- inv
getInverse <- function() i
list(setData = setData, getData=getData, setInverse=setInverse, getInverse=getInverse)
}
## Get the inverse of a special matrix created by makeCacheMatrix()
## If the inverse is not calculated, calculate it and save it in cache.
## Otherwise, return the cached inverse directly
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
i <- x$inverse
if (is.null(i)) {
data <- x$getData()
i <- solve(data)
x$setInverse(i)
}
i
}
x <- 1:4
z<- makeCacheMatrix(x)
z1 <- cacheSolve(x)
is.recursive(x)
is.atomic(x)
## Put comments here that give an overall description of what your
## functions do
# makeCacheMatrix creates a special "matrix", which is really a list
# containing a function to
# 1. set the value of the matrix
# 2. get the value of the matrix
# 3. set the value of the inverse
# 4. get the value of the inverse
makeCacheMatrix <- function(x = matrix()) {
i <- NULL
setData <- function(y) {
x <<- y
i <<- NULL
}
getData <- function() x
setInverse <- function(inv) i <<- inv
getInverse <- function() i
list(setData = setData, getData=getData, setInverse=setInverse, getInverse=getInverse)
}
## Get the inverse of a special matrix created by makeCacheMatrix()
## If the inverse is not calculated, calculate it and save it in cache.
## Otherwise, return the cached inverse directly
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
i <- x$inverse
if (is.null(i)) {
data <- x[getData()]
i <- solve(data)
x[setInverse(i)]
}
i
}
x <- 1:4
z<- makeCacheMatrix(x)
z1 <- cacheSolve(x)
## Put comments here that give an overall description of what your
## functions do
# makeCacheMatrix creates a special "matrix", which is really a list
# containing a function to
# 1. set the value of the matrix
# 2. get the value of the matrix
# 3. set the value of the inverse
# 4. get the value of the inverse
makeCacheMatrix <- function(x = matrix()) {
i <- NULL
setData <- function(y) {
x <<- y
i <<- NULL
}
getData <- function() x
setInverse <- function(inv) i <<- inv
getInverse <- function() i
list(setData = setData, getData=getData, setInverse=setInverse, getInverse=getInverse)
}
## Get the inverse of a special matrix created by makeCacheMatrix()
## If the inverse is not calculated, calculate it and save it in cache.
## Otherwise, return the cached inverse directly
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
i <- x[inverse]
if (is.null(i)) {
data <- x[getData()]
i <- solve(data)
x[setInverse(i)]
}
i
}
x <- 1:4
z<- makeCacheMatrix(x)
z1 <- cacheSolve(x)
## Put comments here that give an overall description of what your
## functions do
# makeCacheMatrix creates a special "matrix", which is really a list
# containing a function to
# 1. set the value of the matrix
# 2. get the value of the matrix
# 3. set the value of the inverse
# 4. get the value of the inverse
makeCacheMatrix <- function(x = matrix()) {
i <- NULL
setData <- function(y) {
x <<- y
i <<- NULL
}
getData <- function() x
setInverse <- function(inv) i <<- inv
getInverse <- function() i
list(setData = setData, getData=getData, setInverse=setInverse, getInverse=getInverse)
}
## Get the inverse of a special matrix created by makeCacheMatrix()
## If the inverse is not calculated, calculate it and save it in cache.
## Otherwise, return the cached inverse directly
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
i <- x[inv]
if (is.null(i)) {
data <- x[getData()]
i <- solve(data)
x[setinverse(i)]
}
i
}
x <- 1:4
z<- makeCacheMatrix(x)
z1 <- cacheSolve(x)
## Put comments here that give an overall description of what your
## functions do
# makeCacheMatrix creates a special "matrix", which is really a list
# containing a function to
# 1. set the value of the matrix
# 2. get the value of the matrix
# 3. set the value of the inverse
# 4. get the value of the inverse
makeCacheMatrix <- function(x = matrix()) {
i <- NULL
setData <- function(y) {
x <<- y
i <<- NULL
}
getData <- function() x
setInverse <- function(inv) i <<- inv
getInverse <- function() i
list(setData = setData, getData=getData, setInverse=setInverse, getInverse=getInverse)
}
## Get the inverse of a special matrix created by makeCacheMatrix()
## If the inverse is not calculated, calculate it and save it in cache.
## Otherwise, return the cached inverse directly
cacheSolve <- function(x, ...) {
# get inverse from the special matrix list using getinv function
inv <-x$getinv()
# check if the inverse has alreay been calculated. If yes, then return
# the value of inverse from cache
if(!is.null(inv)) {
message("getting cached data")
return(inv)
}
# The inverse hasn't been calculated yet. So get the value of matrix
# using get function
data <- x$get()
# calculate the inverse using solve
inv <- solve(data, ...)
# set the inverse using setinv function
x$setinv(inv)
# return the value of inverse calculated above
inv
}
x <- 1:4
z<- makeCacheMatrix(x)
z1 <- cacheSolve(x)
## Put comments here that give an overall description of what your
## functions do
# makeCacheMatrix creates a special "matrix", which is really a list
# containing a function to
# 1. set the value of the matrix
# 2. get the value of the matrix
# 3. set the value of the inverse
# 4. get the value of the inverse
makeCacheMatrix <- function(x = matrix()) {
i <- NULL
setData <- function(y) {
x <<- y
i <<- NULL
}
getData <- function() x
setInverse <- function(inv) i <<- inv
getInverse <- function() i
list(setData = setData, getData=getData, setInverse=setInverse, getInverse=getInverse)
}
## Get the inverse of a special matrix created by makeCacheMatrix()
## If the inverse is not calculated, calculate it and save it in cache.
## Otherwise, return the cached inverse directly
cacheSolve <- function(x, ...) {
# get inverse from the special matrix list using getinv function
inv <-x[getinv()]
# check if the inverse has alreay been calculated. If yes, then return
# the value of inverse from cache
if(!is.null(inv)) {
message("getting cached data")
return(inv)
}
# The inverse hasn't been calculated yet. So get the value of matrix
# using get function
data <- x[get()]
# calculate the inverse using solve
inv <- solve(data, ...)
# set the inverse using setinv function
x[setinv(inv)]
# return the value of inverse calculated above
inv
}
x <- 1:4
z<- makeCacheMatrix(x)
z1 <- cacheSolve(x)
## Put comments here that give an overall description of what your
## functions do
# makeCacheMatrix creates a special "matrix", which is really a list
# containing a function to
# 1. set the value of the matrix
# 2. get the value of the matrix
# 3. set the value of the inverse
# 4. get the value of the inverse
makeCacheMatrix <- function(x = matrix()) {
# Initialize inverse matrix as NULL
inv <- NULL
# Define set function to set the value of the matrix
set <- function(y) {
x <<- y
inv <<- NULL
}
# Define get function to get the value of the matrix
get <- function() x
# Define setinv function to set the value of the inverse
setinv <- function(solve) inv <<- solve
# Define getinv function to get the value of the inverse
getinv <- function() inv
# Return a list containing all 4 functions defined above
list(set = set, get = get, setinv = setinv, getinv = getinv)
}
## Get the inverse of a special matrix created by makeCacheMatrix()
## If the inverse is not calculated, calculate it and save it in cache.
## Otherwise, return the cached inverse directly
cacheSolve <- function(x, ...) {
# get inverse from the special matrix list using getinv function
inv <-x[getinv()]
# check if the inverse has alreay been calculated. If yes, then return
# the value of inverse from cache
if(!is.null(inv)) {
message("getting cached data")
return(inv)
}
# The inverse hasn't been calculated yet. So get the value of matrix
# using get function
data <- x[get()]
# calculate the inverse using solve
inv <- solve(data, ...)
# set the inverse using setinv function
x[setinv(inv)]
# return the value of inverse calculated above
inv
}
x <- 1:4
z<- makeCacheMatrix(x)
z1 <- cacheSolve(x)
?get
## Put comments here that give an overall description of what your
## functions do
# makeCacheMatrix creates a special "matrix", which is really a list
# containing a function to
# 1. set the value of the matrix
# 2. get the value of the matrix
# 3. set the value of the inverse
# 4. get the value of the inverse
makeCacheMatrix <- function(x = matrix()) {
# Initialize inverse matrix as NULL
inv <- NULL
# Define set function to set the value of the matrix
set <- function(y) {
x <<- y
inv <<- NULL
}
# Define get function to get the value of the matrix
get <- function() x
# Define setinv function to set the value of the inverse
setinv <- function(solve) inv <<- solve
# Define getinv function to get the value of the inverse
getinv <- function() inv
# Return a list containing all 4 functions defined above
list(set = set, get = get, setinv = setinv, getinv = getinv)
}
## Get the inverse of a special matrix created by makeCacheMatrix()
## If the inverse is not calculated, calculate it and save it in cache.
## Otherwise, return the cached inverse directly
cacheSolve <- function(x, ...) {
# get inverse from the special matrix list using getinv function
inv <-x[get(inv())]
# check if the inverse has alreay been calculated. If yes, then return
# the value of inverse from cache
if(!is.null(inv)) {
message("getting cached data")
return(inv)
}
# The inverse hasn't been calculated yet. So get the value of matrix
# using get function
data <- x[get()]
# calculate the inverse using solve
inv <- solve(data, ...)
# set the inverse using setinv function
x[setinv(inv)]
# return the value of inverse calculated above
inv
}
x <- 1:4
z<- makeCacheMatrix(x)
z1 <- cacheSolve(x)
